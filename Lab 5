import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

public class AirlineSimulation {
	private ArrayList<Passenger1> deltaPassengers;
	private ArrayList<Passenger1> unitedPassengers;





	// Constructor to initialize the ArrayLists
	public AirlineSimulation() {
		deltaPassengers = new ArrayList<>();
		unitedPassengers = new ArrayList<>();
	}

	// Defining the Passenger1 class
	public class Passenger1 {
		// Defining instance variables
		private String name;
		private String seatNumber;
		private String className;
		private boolean checkedIn;

		// Constructor to initialize the Passenger1 object
		public Passenger1(String name, String seatNumber, String className) {
			this.name = name;
			this.seatNumber = seatNumber;
			this.className = className;
			this.checkedIn = false;
		}

		// Getter methods for the instance variables
		public String getName() {
			return name;
		}

		public String getSeatNumber() {
			return seatNumber;
		}

		public String getClassName() {
			return className;
		}

		public boolean isCheckedIn() {
			return checkedIn;
		}

		// Setter method for the checkedIn instance variable
		public void setCheckedIn(boolean checkedIn) {
			this.checkedIn = checkedIn;
		}
	}

	// Method to load the passenger list from a file
	public void loadPassengerList(String airline, String filename) {
		try {
			Scanner fileReader = new Scanner(new File(filename));
			while (fileReader.hasNextLine()) {
				String line = fileReader.nextLine();
				String[] parts = line.split(" ");
				String name = parts[0] + " " + parts[1];
				String seatNumber = parts[2]+ " "+parts[3];
				String className = parts[3];
				Passenger1 passenger = new Passenger1(name, seatNumber, className);
				if (airline.equals("Delta")) {
					deltaPassengers.add(passenger);
				} else if (airline.equals("United")) {
					unitedPassengers.add(passenger);
				}
			}
			fileReader.close();
		} catch (FileNotFoundException e) {
			System.out.println("Error: " + e.getMessage());
		}
	}

	// Method to check-in a passenger
	public void checkInPassenger(String airline, String name) {
		// Select the correct ArrayList based on the airline
		ArrayList<Passenger1> passengers = null;
		if (airline.equals("Delta")) {
			passengers = deltaPassengers;
		} else if (airline.equals("United")) {
			passengers = unitedPassengers;
		}
		boolean passengerFound = false;
		// Check if the passenger is in the ArrayList and update their checkedIn status
		for (Passenger1 passenger : passengers) {
			if (passenger.getName().equals(name)) {
				passenger.setCheckedIn(true);
				passengerFound = true;
				System.out.println("Passenger " + name + " is now checked in for " + airline + ".");
				break;
			}
		}
		if (!passengerFound) {
			System.out.println("Passenger " + name + " is not on the " + airline + " passenger list.");
		}
	}

	// Method to book a passenger
	public void bookPassenger(String airline, String name, String className) {
		// Initialize necessary variables
		ArrayList<Passenger1> passengers = null;
		int capacity = 0;
		// Set the capacity based on the class
		if (className.equals("First")) {
			capacity = 10;
		} else if (className.equals("Business")) {
			capacity = 10;
		} else if (className.equals("Economy")) {
			capacity = 20;
		}
		// Select the correct ArrayList based on the airline
		if (airline.equals("Delta")) {
			passengers = deltaPassengers;
		} else if (airline.equals("United")) {
			passengers = unitedPassengers;
		}
		String seatNumber = "";
		int bookedSeats = 0;
		// Count the number of booked seats in the class
		for (Passenger1 passenger : passengers) {
			if (passenger.getClassName().equals(className)) {
				bookedSeats++;
			}
		}
		// Check if there is space in the class and book the passenger
		if (bookedSeats >= capacity) {
			System.out.println("Sorry, there are no available seats in " + className + " class for " + airline + ".");
		} else {
			for (int i = 1; i <= capacity; i++) {
				boolean seatTaken = false;
				// Check if the seat is already taken
				for (Passenger1 passenger : passengers) {
					if (passenger.getSeatNumber().equals(Integer.toString(i))) {
						seatTaken = true;
						break;
					}
				}
				// Assign the first available seat to the new passenger
				if (!seatTaken) {
					seatNumber = Integer.toString(i);
					break;
				}
			}
		}
		// Create a new Passenger1 object and add it to the correct ArrayList
		Passenger1 newPassenger = new Passenger1(name, seatNumber, className);
		passengers.add(newPassenger);
		System.out.println("Passenger " + name + " has been booked on " + airline + " flight in " + className + " class with seat number"+ seatNumber + className);
	}

	// Method to print the boarding list for a specific airline
	public void printBoardingList(String airline) {
		ArrayList<Passenger1> passengers = null;
		if (airline.equals("Delta")) {
			passengers = deltaPassengers;
		} else if (airline.equals("United")) {
			passengers = unitedPassengers;
		}
		System.out.println("Boarding list for " + airline + ":");
		// Print the boarding list for checked-in passengers
		for (Passenger1 passenger : passengers) {
			if ( passenger.isCheckedIn()) {
				System.out.println(passenger.getName() + " - Seat " + passenger.getSeatNumber());
			}
		}
	}

	// Method to run the simulation
	public void runSimulation() {
		Random random = new Random();
		// Simulate 10 time steps
		for (int i = 1; i <= 10; i++) {
			// Generate new passengers with a 10% chance
			boolean newPassengers = random.nextDouble() < 0.1;
			if (newPassengers) {
				int numNewPassengers = random.nextInt(10) + 1;
				for (int j = 1; j <= numNewPassengers; j++) {
					String name = "Passenger " + (deltaPassengers.size() + unitedPassengers.size() + j);
					String[] classes = {"First", "Business", "Economy"};
					String className = classes[random.nextInt(3)];
					boolean booked = false;
					// Book the passenger on Delta with 80% probability
					if (random.nextDouble() < 0.8) {
						bookPassenger("Delta", name, className);
						booked = true;
					}
					// If the passenger was not booked on Delta or with 50% probability, book on United
					if (!booked || random.nextDouble() < 0.5) {
						bookPassenger("United", name, className);
					}
				}
			}
			// Check in a random subset of Delta passengers with a 5% chance
			for (Passenger1 passenger : deltaPassengers) {
				if (!passenger.isCheckedIn() && random.nextDouble() < 0.05) {
					checkInPassenger("Delta", passenger.getName());
				}
			}
			// Check in a random subset of United passengers with a 5% chance
			for (Passenger1 passenger : unitedPassengers) {
				if (!passenger.isCheckedIn() && random.nextDouble() < 0.05) {
					checkInPassenger("United", passenger.getName());
				}
			}
		}
		// Print the boarding lists for Delta and United
		System.out.println("Delta passengers for boarding:");
		printBoardingList("Delta");
		System.out.println();
		System.out.println("United passengers for boarding:");
		printBoardingList("United");
	}

	public static void main(String[] args) {
		// Create a new AirlineSimulation object
		AirlineSimulation simulation = new AirlineSimulation();
		// Load the passenger lists from files
		simulation.loadPassengerList("Delta", "Delta.txt");
		simulation.loadPassengerList("United", "United.txt");
		Scanner scanner = new Scanner(System.in);
		// Main loop to interact with the simulation
		while (true) {
			System.out.println("Choose an option:");
			System.out.println("1. Check-in passenger");
			System.out.println("2. Book passenger");
			System.out.println("3. Print boarding list");
			System.out.println("4. Run simulation");
			System.out.println("5. Exit");
			int choice = scanner.nextInt();
			scanner.nextLine();
			// Call the appropriate method based on user input
			if (choice == 1) {
				System.out.println("Enter airline (Delta or United):");
				String airline = scanner.nextLine();
				System.out.println("Enter passenger name:");
				String name = scanner.nextLine();
				simulation.checkInPassenger(airline, name);
			} else if (choice == 2) {
				System.out.println("Enter airline (Delta or United):");
				String airline = scanner.nextLine();
				System.out.println("Enter passenger name:");
				String name = scanner.nextLine();
				System.out.println("Enter class (First, Business, or Economy):");
				String className = scanner.nextLine();
				simulation.bookPassenger(airline, name, className);
			} else if (choice == 3) {
				System.out.println("Enter airline (Delta or United):");
				String airline = scanner.nextLine();
				simulation.printBoardingList(airline);
			} else if (choice == 4) {
				simulation.runSimulation();
			} else if (choice == 5) {
				break;
			}
		}
	}}
